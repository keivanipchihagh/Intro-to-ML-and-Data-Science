{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "private_outputs": true,
      "authorship_tag": "ABX9TyP1X1xz299TrEq5u7B2ZPmI",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/keivanipchihagh/intro_to_machineLearning/blob/master/celsiusToFahrenheitConvertionML\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LNB2ybL5Cg81",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Indicate tensorflow version\n",
        "%tensorflow_version 2.x\n",
        "\n",
        "# Imports\n",
        "from __future__ import absolute_import, division, print_function, unicode_literals\n",
        "import tensorflow as tf # TensorFlow\n",
        "import numpy as np  # NumPy\n",
        "import logging  # TensorFlow logger\n",
        "import matplotlib.pyplot as plt # Visual graphs and stuff"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bZozJiCCC_bM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Setup training data\n",
        "celsius = np.array([-40, -10,  0,  8, 15, 22,  38])\n",
        "fahrenheit = np.array([-40,  14, 32, 46, 59, 72, 100])\n",
        "\n",
        "# Iterate the dataset\n",
        "for i in range(len(celsius)):\n",
        "  print(\"\\'{}\\' in Celsius = \\'{}\\' in Ferhenheit\".format(celsius[i], fahrenheit[i]))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fDAUk8NgE_z3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Create a model with layer\n",
        "layer = tf.keras.layers.Dense(units = 1, input_shape = [1])\n",
        "module = tf.keras.Sequential([layer])\n",
        "\n",
        "'''\n",
        "module = tf.keras.Sequential([\n",
        "  tf.keras.layers.Dense(units = 1, input_shape = [1])\n",
        "])\n",
        "'''\n",
        "\n",
        "# Compile the module, Initialize optimizer engine, loss function and learning rate of 1%\n",
        "module.compile(loss = 'mean_squared_error', optimizer = tf.keras.optimizers.Adam(0.1))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-Y2tQ7Q_Man8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Train the module\n",
        "history = module.fit(celsius, fahrenheit, epochs = 1000, verbose = False) # Total 35000 iterations\n",
        "print(\"Traning has been finished successfully.\")"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x9AUbqaqNW3r",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Draw statistics\n",
        "plt.xlabel('Epoch Number')\n",
        "plt.ylabel(\"Loss Magnitude\")\n",
        "plt.plot(history.history['loss'])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sBAiq-mON7cO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "print(\"NN weights are as followed: \", layer.get_weights())"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B7cTgpPgNjM7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Ask module to predict anything\n",
        "print(module.predict([100]))\n",
        "print(module.predict([1913.7]))\n",
        "print(module.predict([51.235]))\n",
        "print(module.predict([38]))"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}