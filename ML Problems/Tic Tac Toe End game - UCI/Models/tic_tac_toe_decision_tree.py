# -*- coding: utf-8 -*-
"""Tic Tac Toe - Decision Tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N0TVxQxJ7Gs-SAxoSN4tidcb2L4kzn4s

# Tic Tac Toe - Decision Tree

## Imports
"""

import numpy as np
import pandas as pd
import random

# Visualisation
import seaborn as sns
from matplotlib import pyplot as plt

# Sklearn
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn import metrics
from sklearn.metrics import mean_squared_error
from sklearn.metrics import classification_report
from sklearn.metrics import precision_score,roc_auc_score,roc_curve

"""## Load Dataset"""

data = pd.read_csv('https://raw.githubusercontent.com/keivanipchihagh/Tic-Tac-Toe-ML-EXTENDED/main/Tic-Tac-Toe%20End%20game%20Dataset%20UCI/tic-tac-toe-endgame.csv')
data.head()

"""## Pre-Process Data"""

data.replace('x', 0, inplace = True)  # AI
data.replace('o', 1, inplace = True)  # HUMAN
data.replace('b', 2, inplace = True)  # EMPTY
data['V10'] = data['V10'].map({'positive': 1, 'negative': 0}) # Stats
data.head()

"""## Hold Out"""

# Set random state to 1 for debugging purposes
x_train, x_test, y_train, y_test = train_test_split(data[['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9']], data[['V10']], test_size = 0.3, random_state = 1)

"""## Decision Tree"""

# Define the tree
tree = DecisionTreeClassifier()

# Train the tree
tree.fit(x_train, y_train)

# Predict
prediction = tree.predict(x_test)

for i in range(10):
  print('Test:', y_test.iloc[i]['V10'])
  print('Precitions:', prediction[i], end = '\n' * 2)

"""## Evaluation"""

print("Accuracy:",metrics.accuracy_score(y_test, prediction))
print("Precision:",metrics.precision_score(y_test, prediction, average = "macro"))
print("Recall:",metrics.recall_score(y_test, prediction, average = "macro"))
print("F1-Score:",metrics.f1_score(y_test, prediction, average = "macro"))